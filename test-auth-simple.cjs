// Test simple du syst√®me d'authentification
const jwt = require('jsonwebtoken');

const JWT_SECRET = 'niaxtu-super-secret-key-2024';
const API_BASE_URL = 'http://localhost:3001/api';

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

// G√©n√©rer un token de test
const generateTestToken = () => {
  const testUser = {
    id: 'test-admin-123',
    email: 'admin@niaxtu.com',
    role: 'admin',
    permissions: ['VIEW_USERS', 'MANAGE_COMPLAINTS', 'CREATE_ADMIN']
  };

  return jwt.sign(testUser, JWT_SECRET, { expiresIn: '24h' });
};

// Afficher les tests
const displayTests = () => {
  log('üöÄ TESTS D\'AUTHENTIFICATION NIAXTU', 'blue');
  log('=====================================', 'blue');

  // G√©n√©rer un token de test
  const testToken = generateTestToken();
  
  log('\n‚úÖ Token JWT g√©n√©r√© avec succ√®s:', 'green');
  log(`   ${testToken}`, 'cyan');

  // V√©rifier le token
  try {
    const decoded = jwt.verify(testToken, JWT_SECRET);
    log('\n‚úÖ Token d√©cod√© avec succ√®s:', 'green');
    log(`   ID: ${decoded.id}`, 'green');
    log(`   Email: ${decoded.email}`, 'green');
    log(`   R√¥le: ${decoded.role}`, 'green');
    log(`   Permissions: ${decoded.permissions.join(', ')}`, 'green');
  } catch (error) {
    log('\n‚ùå Erreur de d√©codage du token:', 'red');
    log(`   ${error.message}`, 'red');
  }

  log('\nüß™ COMMANDES DE TEST CURL:', 'blue');
  log('============================', 'blue');

  // Test 1: Login
  log('\n1Ô∏è‚É£  Test de Login:', 'yellow');
  log('curl -X POST \\', 'cyan');
  log('  -H "Content-Type: application/json" \\', 'cyan');
  log('  -d \'{"email":"admin@niaxtu.com","password":"admin123"}\' \\', 'cyan');
  log(`  ${API_BASE_URL}/auth/login`, 'cyan');

  // Test 2: Profil utilisateur
  log('\n2Ô∏è‚É£  Test du Profil Utilisateur:', 'yellow');
  log('curl -X GET \\', 'cyan');
  log(`  -H "Authorization: Bearer ${testToken}" \\`, 'cyan');
  log(`  ${API_BASE_URL}/users/profile`, 'cyan');

  // Test 3: Liste des utilisateurs
  log('\n3Ô∏è‚É£  Test de la Liste des Utilisateurs:', 'yellow');
  log('curl -X GET \\', 'cyan');
  log(`  -H "Authorization: Bearer ${testToken}" \\`, 'cyan');
  log(`  ${API_BASE_URL}/users/all`, 'cyan');

  // Test 4: Liste des plaintes
  log('\n4Ô∏è‚É£  Test de la Liste des Plaintes:', 'yellow');
  log('curl -X GET \\', 'cyan');
  log(`  -H "Authorization: Bearer ${testToken}" \\`, 'cyan');
  log(`  "${API_BASE_URL}/complaints?page=1&limit=5"`, 'cyan');

  // Test 5: Structures/Minist√®res
  log('\n5Ô∏è‚É£  Test des Minist√®res:', 'yellow');
  log('curl -X GET \\', 'cyan');
  log(`  -H "Authorization: Bearer ${testToken}" \\`, 'cyan');
  log(`  ${API_BASE_URL}/structures/ministeres`, 'cyan');

  // Test 6: Statistiques admin
  log('\n6Ô∏è‚É£  Test des Statistiques Admin:', 'yellow');
  log('curl -X GET \\', 'cyan');
  log(`  -H "Authorization: Bearer ${testToken}" \\`, 'cyan');
  log(`  ${API_BASE_URL}/admin/stats`, 'cyan');

  // Test 7: Cr√©ation d'admin
  log('\n7Ô∏è‚É£  Test de Cr√©ation d\'Admin:', 'yellow');
  log('curl -X POST \\', 'cyan');
  log('  -H "Content-Type: application/json" \\', 'cyan');
  log(`  -H "Authorization: Bearer ${testToken}" \\`, 'cyan');
  log('  -d \'{"email":"test@test.com","displayName":"Test Admin","role":"moderator","isActive":true}\' \\', 'cyan');
  log(`  ${API_BASE_URL}/admin`, 'cyan');

  // Test 8: Token invalide
  log('\n8Ô∏è‚É£  Test avec Token Invalide:', 'yellow');
  log('curl -X GET \\', 'cyan');
  log('  -H "Authorization: Bearer invalid-token" \\', 'cyan');
  log(`  ${API_BASE_URL}/users/profile`, 'cyan');

  log('\nüìã R√âSULTATS ATTENDUS:', 'blue');
  log('======================', 'blue');
  log('‚úÖ Tests 1-7: Status 200 (succ√®s)', 'green');
  log('‚ùå Test 8: Status 401 (non autoris√©)', 'red');

  log('\nüîç V√âRIFICATIONS:', 'blue');
  log('==================', 'blue');
  log('1. Le serveur backend doit √™tre d√©marr√© sur le port 3001', 'yellow');
  log('2. Un admin avec email "admin@niaxtu.com" et password "admin123" doit exister', 'yellow');
  log('3. Les routes doivent utiliser le middleware authenticateToken', 'yellow');
  log('4. La collection "admin" doit contenir les donn√©es utilisateur', 'yellow');

  log('\nüí° CONSEILS DE D√âBOGAGE:', 'blue');
  log('=========================', 'blue');
  log('‚Ä¢ Si erreur 401: V√©rifier le middleware d\'authentification', 'yellow');
  log('‚Ä¢ Si erreur 500: V√©rifier les logs du serveur backend', 'yellow');
  log('‚Ä¢ Si erreur de connexion: V√©rifier que le serveur est d√©marr√©', 'yellow');
  log('‚Ä¢ Si token invalide: V√©rifier la cl√© JWT_SECRET', 'yellow');

  log('\nüéØ TOKEN POUR TESTS MANUELS:', 'green');
  log('==============================', 'green');
  log(testToken, 'cyan');
  log('\nCopiez ce token pour vos tests manuels dans Postman ou autres outils', 'green');
};

// Ex√©cuter les tests
displayTests(); 